#!/usr/bin/python
'''
Contains definitions of the leg dimensions.  Generates a header
file containing C definitions for those dimensions when run.
'''

import sys
from numpy import matrix

DATATYPE = 'static const float'
TEMPLATE = '''\
// Autogenerated file: use {execFn} to edit

/// The xyz position change from the shoulder joint pivot point to the knee joint pivot point.
{datatype} s1[3] = {{{s1[0]}, {s1[1]}, {s1[2]}}};
 /// The xyz position change from the knee joint pivot point to the foot joint pivot point.
{datatype} s2[3] = {{{s2[0]}, {s2[1]}, {s2[2]}}};
/// The xyz position change from the foot joint pivot point to the tip of the foot.
{datatype} s3[3] = {{{s3[0]}, {s3[1]}, {s3[2]}}};

/// The xyz position change from the shoulder joint pivot point to the cog of the knee motor.
{datatype} s1_cog[3] = {{4.2,0.0,1.0}};
/// The xyz position change from the knee joint pivot point to the cog of the foot motor.
{datatype} s2_cog[3] = {{0.0,0.0,5.0}};
/// The xyz position change from the foot joint pivot point to the cog of foot.
{datatype} s3_cog[3] = {{0.0,4.8,3.0}};

/// Offset from the center of the robot to the feet.
{datatype} leg_offsets[3] = {{8.8 / 2.0, (18.35 / 2.0) + 1.5, 0.0}};
'''

# [x, y, z] displacement matrices of the leg in zero-position (with
# every servo's arm parallel to its length).
s1 = matrix([
	[4.5],
	[0],
	[2.5],
])
s2 = matrix([
	[0],
	[0],
	[6.7],
])
s3 = matrix([
	[0],
	[9.75],
	[3.25],
])

def asList(vector):
	return [float(x) for x in vector]

if __name__ == '__main__':
	try:
		headerfn = sys.argv[1]
	except IndexError:
		sys.stderr.write('usage: {0} <header-file>\n'.format(sys.argv[0]))
		sys.exit(2)
	with open(headerfn, 'w') as outf:
		outf.write(TEMPLATE.format(
			execFn=sys.argv[0],
			datatype=DATATYPE,
			s1=asList(s1),
			s2=asList(s2),
			s3=asList(s3)))

