From c51620a7887c4f004820e85cc8aa8312c82ed0e2 Mon Sep 17 00:00:00 2001
From: Michael Auchter <michael.auchter@gmail.com>
Date: Fri, 5 Feb 2010 14:27:40 +0000
Subject: [PATCH 9/9] serial_core: update serial_rs485_settings struct

Changed the two time delay fields to 32-bit instead of 16-bit.  They were
originally 16-bit since I mistakenly assumed that the ktime_set() macro
specified time in microseconds, but it takes nanoseconds.  The fields in struct
serial_rs485 were also changed to reflect the fact that they're not in
microseconds.

In rs485_set_settings(), removed two calls which over-wrote the
delay_before_send and the delay_after send variables, which converted the
specified time from milliseconds to jiffies.  The delays specified in userspace
code were probably wrong due to this.
---
 drivers/serial/serial_core.c |   28 +++++++++-------------------
 include/linux/serial_core.h  |   11 ++++-------
 2 files changed, 13 insertions(+), 26 deletions(-)

diff --git a/drivers/serial/serial_core.c b/drivers/serial/serial_core.c
index e8dbaed..af6714c 100644
--- a/drivers/serial/serial_core.c
+++ b/drivers/serial/serial_core.c
@@ -542,14 +542,14 @@ static enum hrtimer_restart direction_control_timed_xmit_end_detect(struct hrtim
 	struct uart_port *port = container_of(rs, struct uart_port, rs485);
 
 	if (port->ops->tx_empty(port)) {
-		if (rs->post_usecs) {
+		if (rs->post_delay_ns) {
 			/*
 			 * Schedule line turn around after required delay.
 			 */
 			rs->hr_pre_post_timer.function =
 					direction_control_timed_post_xmit;
 			hrtimer_start(&rs->hr_pre_post_timer,
-					ktime_set(0, rs->post_usecs), HRTIMER_MODE_REL);
+					ktime_set(0, rs->post_delay_ns), HRTIMER_MODE_REL);
 		} else {
 			/*
 			 * No delay required turn line around now.
@@ -560,7 +560,7 @@ static enum hrtimer_restart direction_control_timed_xmit_end_detect(struct hrtim
 		/* 
 		 * Transmission not finished, so try again next jiffy.
 		 */
-		hrtimer_start(&rs->hr_pre_post_timer, ktime_set(0, rs->post_usecs),
+		hrtimer_start(&rs->hr_pre_post_timer, ktime_set(0, rs->post_delay_ns),
 				HRTIMER_MODE_REL);
 	}
 	return HRTIMER_NORESTART;
@@ -584,7 +584,7 @@ static enum hrtimer_restart direction_control_timed_start_xmit(struct hrtimer *t
 	unsigned long flags;
 
 	rs->hr_pre_post_timer.function = direction_control_timed_xmit_end_detect;
-	hrtimer_start(&rs->hr_pre_post_timer, ktime_set(0, rs->post_usecs),
+	hrtimer_start(&rs->hr_pre_post_timer, ktime_set(0, rs->post_delay_ns),
 			HRTIMER_MODE_REL);
 
 
@@ -616,13 +616,14 @@ static void direction_control_uart_start(struct tty_struct *tty)
 				  rs->mctrl_mask & rs->mctrl_xmit,
 				  rs->mctrl_mask & ~rs->mctrl_xmit);
 
-		if (rs->pre_usecs) {
+		if (rs->pre_delay_ns) {
 			/*
 			 * Pre transmission delay required, schedule timer.
 			 */
 			rs->hr_pre_post_timer.function =
 					direction_control_timed_start_xmit;
-			hrtimer_start(&rs->hr_pre_post_timer, ktime_set(0, rs->pre_usecs),
+			hrtimer_start(&rs->hr_pre_post_timer, 
+					ktime_set(0, rs->pre_delay_ns),
 					HRTIMER_MODE_REL);
 
 
@@ -1313,24 +1314,13 @@ static int rs485_set_settings(struct tty_struct *tty,
 	if (copy_from_user(&rs->settings, uarg, sizeof(rs->settings))) {
 		return -EFAULT;
 	}
-	/*
-	 * Alter requested settings to match our capabilities.
-	 * The user can query this by reading the setting back.
-	 */
-	rs->settings.delay_before_send =
-		jiffies_to_usecs(usecs_to_jiffies(
-					rs->settings.delay_before_send)); 
-
-	rs->settings.delay_after_send =
-		jiffies_to_usecs(usecs_to_jiffies(
-					rs->settings.delay_after_send)); 
 
 	/*
 	 * Pre-calculate values based on settings, to make interrupt code
 	 * more efficient.
 	 */
-	rs->pre_usecs = rs->settings.delay_before_send;
-	rs->post_usecs = rs->settings.delay_after_send;
+	rs->pre_delay_ns = rs->settings.delay_before_send;
+	rs->post_delay_ns = rs->settings.delay_after_send;
 
 	rs->mctrl_mask = 0;
 	rs->mctrl_xmit = 0;
diff --git a/include/linux/serial_core.h b/include/linux/serial_core.h
index a0d5ad6..e4b40dc 100644
--- a/include/linux/serial_core.h
+++ b/include/linux/serial_core.h
@@ -276,19 +276,16 @@ struct serial_rs485_settings{
 #define SER_RS485_MODE_DTR		(2 << 0)
 #define SER_RS485_RTS_TX_LOW		(1 << 2)	/* Inverted RTS	*/
 #define SER_RS485_DTR_TX_LOW		(1 << 3)	/* Inverted DTR	*/
-		__u32   delay_before_send;		/* Microseconds */
-		__u32   delay_after_send;		/* Microseconds */
+		__u32   delay_before_send;		/* Nanoseconds */
+		__u32   delay_after_send;		/* Nanoseconds */
 		__u32   padding[5];             /* Memory is cheap, new structs
 						   are a royal PITA .. */
 };
 struct serial_rs485 {
 	struct serial_rs485_settings	settings;
-//	struct	timer_list       	pre_post_timer;
-//	u16	pre_jiffies;
-//	u16	post_jiffies;
 	struct hrtimer			hr_pre_post_timer;
-	u16				pre_usecs;
-	u16				post_usecs;
+	u32				pre_delay_ns;
+	u32				post_delay_ns;
 	struct tty_struct 		*tty;
 	unsigned int mctrl_mask;
 	unsigned int mctrl_xmit;		/* Bits for Tx.	*/
-- 
1.6.4.4

